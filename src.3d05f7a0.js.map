{"version":3,"sources":["index.js"],"names":["refs","daysRef","document","querySelector","hoursRef","minsRef","secsRef","CountdownTimer","selector","targetDate","intervalId","newTimer","setInterval","currentTime","Date","now","startTime","timer","updateValues","time","updateClockFace","pad","Math","floor","value","String","padStart","days","hours","mins","secs","textContent","start"],"mappings":";AAkDC,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAhDD,IAAMA,EAAO,CACTC,QAAUC,SAASC,cAAc,2BACjCC,SAAWF,SAASC,cAAc,4BAClCE,QAAUH,SAASC,cAAc,2BACjCG,QAAUJ,SAASC,cAAc,4BAG/BI,EAAAA,WACUC,SAAAA,EAAAA,EAAUC,GAAY,EAAA,KAAA,GAC1BC,KAAAA,WAAa,KACbF,KAAAA,SAAWA,EACXC,KAAAA,WAAaA,EAqCxB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,QAjCD,MAAA,SAAME,GAAU,IAAA,EAAA,KACPD,KAAAA,WAAaE,YAAY,WACpBC,IAAAA,EAAcC,KAAKC,MACnBC,EAAY,EAAKP,WAE3BE,EADiBK,EAAYH,IAE1B,SA2BN,EAzCKN,GAkBAS,EAAY,IAAIF,KAAK,gBACrBG,EAAQ,IAAIV,EAAe,UAAWS,GAI5C,SAASE,EAAaC,GAMtBC,EALgBC,EAAIC,KAAKC,MAAMJ,EAAQ,QACtBE,EAAIC,KAAKC,MAAOJ,EAAQ,MAAyB,OAClDE,EAAIC,KAAKC,MAAOJ,EAAQ,KAAoB,MAC5CE,EAAIC,KAAKC,MAAOJ,EAAQ,IAAc,OAKtD,SAASE,EAAIG,GACHC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAGpC,SAASN,EAAgBO,EAAMC,EAAOC,EAAMC,GACxC9B,EAAKC,QAAQ8B,YAAcJ,EAC3B3B,EAAKI,SAAS2B,YAAcH,EAC5B5B,EAAKK,QAAQ0B,YAAcF,EAC3B7B,EAAKM,QAAQyB,YAAcD,EAnB/Bb,EAAMe,MAAMd","file":"src.3d05f7a0.js","sourceRoot":"../src","sourcesContent":["/* import '../src/style.css'; */\n\nconst refs = {\n    daysRef : document.querySelector('span[data-value = days]'),\n    hoursRef : document.querySelector('span[data-value = hours]'),\n    minsRef : document.querySelector('span[data-value = mins]'),\n    secsRef : document.querySelector('span[data-value = secs]'),\n}\n\nclass CountdownTimer {\n    constructor(selector, targetDate) {\n       this.intervalId = null;\n       this.selector = selector;\n       this.targetDate = targetDate; \n    \n}\n\nstart(newTimer) {\n    this.intervalId = setInterval(() => {\n        const currentTime = Date.now();  \n        const startTime = this.targetDate;\n        const time = startTime - currentTime;\n    newTimer(time);\n    }, 1000);\n}\n}\n\nconst startTime = new Date('May 25, 2021');\nconst timer = new CountdownTimer('#timer1', startTime);\n\ntimer.start(updateValues);\n\nfunction updateValues(time) {\n   const days = pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n   const hours = pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n   const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n   const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\n\nupdateClockFace(days, hours, mins, secs);\n}\n\nfunction pad(value) {\n   return String(value).padStart(2, '0');\n}\n\nfunction updateClockFace(days, hours, mins, secs) {\n    refs.daysRef.textContent = days;\n    refs.hoursRef.textContent = hours;\n    refs.minsRef.textContent = mins;\n    refs.secsRef.textContent = secs;\n}\n\n\n\n"]}